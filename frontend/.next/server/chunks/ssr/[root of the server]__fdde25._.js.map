{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Users/dansimons/Documents/content-reviewer/content-reviewer/frontend/app/raw-data/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Resizable } from \"react-resizable\"; // ✅ Import resizable component\nimport \"react-resizable/css/styles.css\"; // ✅ Import default styles\n\ninterface ActivityData {\n    id: number;\n    createdAt: string;\n    campaignId: string;\n    sender: string;\n    message: string;\n    userId: string;\n    stageId: number;\n    input: string;\n    dateInput: string;\n    submitted: boolean;\n    approved: boolean;\n    feedback: string;\n}\n\n// ✅ Initial column sizes\nconst initialColumnWidths: { [key: string]: number } = {\n    id: 80,\n    createdAt: 200,\n    campaignId: 150,\n    sender: 120,\n    message: 300,\n    userId: 120,\n    stageId: 100,\n    submitted: 100,\n    approved: 100,\n    input: 300,\n    feedback: 300,\n};\n\nexport default function RawDataPage() {\n    const [data, setData] = useState<ActivityData[]>([]);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [currentPage, setCurrentPage] = useState(1);\n    const [columnWidths, setColumnWidths] = useState(initialColumnWidths);\n    const rowsPerPage = 10;\n\n    useEffect(() => {\n        axios.get(\"http://localhost:5001/api/activity-csv\")\n            .then(response => setData(response.data || []))\n            .catch(error => {\n                console.error(\"Error fetching data:\", error);\n                setData([]);\n            });\n    }, []);\n\n    const filteredData = data.filter(row =>\n        Object.values(row).some(value =>\n            value?.toString().toLowerCase().includes(searchQuery.toLowerCase())\n        )\n    );\n\n    const indexOfLastRow = currentPage * rowsPerPage;\n    const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n    const currentRows = filteredData.slice(indexOfFirstRow, indexOfLastRow);\n\n    const nextPage = () => setCurrentPage((prev) => Math.min(prev + 1, Math.ceil(filteredData.length / rowsPerPage)));\n    const prevPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));\n\n    // ✅ Handle column resizing\n    const handleResize = (column: string, event: any, size: any) => {\n        setColumnWidths((prev) => ({\n            ...prev,\n            [column]: size.width,\n        }));\n    };\n\n    return (\n        <div className=\"max-w-6xl mx-auto p-6 bg-gray-900 text-white rounded-lg\">\n            <h1 className=\"text-2xl font-bold text-center mb-4\">Raw Data</h1>\n\n            <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full p-2 mb-4 bg-gray-700 text-white rounded-md\"\n            />\n\n            <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse border border-gray-700\">\n                <thead>\n                    <tr className=\"bg-gray-800\">\n                        {Object.keys(initialColumnWidths).map((column) => (\n                            <th key={column} className=\"border border-gray-600 p-2\">\n                                <Resizable\n                                    width={columnWidths[column]}\n                                    height={30}\n                                    axis=\"x\"\n                                    handle={<div className=\"resizable-handle\" />}\n                                    onResize={(e, { size }) => handleResize(column, e, size)}\n                                    onResizeStop={(e, { size }) => handleResize(column, e, size)}\n                                >\n                                    <div className=\"resizable\" style={{ width: columnWidths[column], whiteSpace: \"nowrap\", overflow: \"hidden\" }}>\n                                        {column.charAt(0).toUpperCase() + column.slice(1)}\n                                    </div>\n                                </Resizable>\n                            </th>\n                        ))}\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {currentRows.length > 0 ? (\n                            currentRows.map((row, index) => (\n                                <tr key={row.id ? `row-${row.id}` : `index-${index}`} className=\"bg-gray-700\">\n                                    <td className=\"border border-gray-600 p-2\">{row.id || \"N/A\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">\n                                        {row.createdAt ? new Date(row.createdAt).toLocaleString() : \"N/A\"}\n                                    </td>\n                                    <td className=\"border border-gray-600 p-2\">{row.campaignId || \"N/A\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">{row.sender || \"N/A\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">\n                                        <ExpandableText text={row.message || \"N/A\"} />\n                                    </td>\n                                    <td className=\"border border-gray-600 p-2\">{row.userId || \"N/A\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">{row.stageId || \"N/A\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">{row.submitted ? \"✅\" : \"❌\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">{row.approved ? \"✅\" : \"❌\"}</td>\n                                    <td className=\"border border-gray-600 p-2\">\n                                        <ExpandableText text={row.input || \"N/A\"} />\n                                    </td>\n                                    <td className=\"border border-gray-600 p-2\">\n                                        <ExpandableText text={row.feedback || \"N/A\"} />\n                                    </td>\n                                </tr>\n                            ))\n                        ) : (\n                            <tr>\n                                <td colSpan={11} className=\"text-center p-4\">No data available</td>\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n\n            <div className=\"flex justify-center mt-4 space-x-4\">\n                <button \n                    onClick={prevPage} \n                    disabled={currentPage === 1}\n                    className=\"px-4 py-2 bg-gray-700 rounded disabled:opacity-50\"\n                >\n                    ⬅ Previous\n                </button>\n                <span className=\"text-lg\">\n                    Page {currentPage} of {Math.ceil(filteredData.length / rowsPerPage)}\n                </span>\n                <button \n                    onClick={nextPage} \n                    disabled={indexOfLastRow >= filteredData.length}\n                    className=\"px-4 py-2 bg-gray-700 rounded disabled:opacity-50\"\n                >\n                    Next ➡\n                </button>\n            </div>\n        </div>\n    );\n}\n\n/** ✅ Expandable Text Component */\nfunction ExpandableText({ text }: { text: string }) {\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <div>\n            <span className=\"cursor-pointer text-blue-400\" onClick={() => setExpanded(!expanded)}>\n                {expanded ? text : text.slice(0, 50) + \"...\"} {/* ✅ Show only 50 chars unless expanded */}\n            </span>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}